/** 加减乘除运算 **/
/** 加 **/
function addition(a, b) {
  var c, d, e;
    c = a.toString().split(".")[1] == undefined ? 0 : a.toString().split(".")[1].length;
    d = b.toString().split(".")[1] == undefined ? 0 : b.toString().split(".")[1].length;
  return e = Math.pow(10, Math.max(c, d)), (multiply(a, e) + multiply(b, e)) / e;
}
/** 减 **/
function subtraction(a, b) {
  var c, d, e;
  a = parseInt(a)
  b = parseInt(b)
  c = a.toString().split(".")[1] == undefined ? 0 : a.toString().split(".")[1].length;
  d = b.toString().split(".")[1] == undefined ? 0 : b.toString().split(".")[1].length;
  return e = Math.pow(10, Math.max(c, d)), (multiply(a, e) - multiply(b, e)) / e;
}
/** 乘 **/
function multiply(a, b) {
  var c = 0,
    d = a.toString(),
    e = b.toString();
    c += d.split(".")[1] == undefined ? 0 : d.split(".")[1].length;
    c += e.split(".")[1] == undefined ? 0: e.split(".")[1].length;
    return parseInt(d.replace(".", "")) * parseInt(e.replace(".", "")) / Math.pow(10, c);
}
/** 除 **/
function division(a, b) {
  var c, d, e = 0,
    f = 0;
  e = a.toString().split(".")[1] == undefined ? 0 : a.toString().split(".")[1].length;
  f = b.toString().split(".")[1] == undefined ? 0 : b.toString().split(".")[1].length;
  c = parseInt(a.toString().replace(".", ""))
  d = parseInt(b.toString().replace(".", ""))
  
  return multiply(c / d, Math.pow(10, f - e));
}
function removeByValue(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] == val) {
      arr.splice(i, 1);
      break;
    }
  }
  return arr
}
/** 加减乘除运算 end**/
/** 格式化时间戳 **/
function formatTime(timestamp, strFormat=0) {
  // 声明变量。
  var times, resultData;
  // 创建 Date 对象。
  times = getDate(parseInt(timestamp) * 1000);
  var year = times.getFullYear();
  var month = ("0" + (times.getMonth() + 1)).slice(-2);
  var day = ("0" + times.getDate()).slice(-2);
  var hr = ("0" + times.getHours()).slice(-2);
  var min = ("0" + times.getMinutes()).slice(-2);
  var sec = ("0" + times.getSeconds()).slice(-2);
  switch (strFormat) {
    case 1:
      resultData = year + "-" + month + "-" + day
      break;
    case 2:
      resultData = year + "-" + month + "-" + day + " " + hr + ":" + min
      break;
    case 3:
      resultData = hr + ":" + min + ":" + sec
      break;
    case 4:
      resultData = year + "." + month + "." + day
      break;
    case 5:
      resultData = year + "/" + month + "/" + day
      break;
    default:
      resultData = year + "-" + month + "-" + day + " " + hr + ":" + min + ":" + sec
      break;
  }
  return resultData;
}
/**数组对象总数 **/
function objCount(obj) {
  var objType = typeof obj;
  console.log(objType)
  if (objType == "string") {
    return obj.length;
  } else if (objType == "object") {
    var objLen = 0;
    for (var i = 0; i < obj.length; i++) {
      objLen++;
    }
    // for (var i in obj) {
    //   objLen++;
    // }
    return objLen;
  }
  return false;
}
/**数组对象总数  END**/
function in_array(search, array) {
  for (var i = 0; i < array.length;i++){
    if (array[i] == search) {
      return true;
    }
  }
  // for (var i in array) {
  //   if (array[i] == search) {
  //     return true;
  //   }
  // }
  return false;
}
/*** 生成随机数 */
function randomNum(minNum, maxNum) {
  switch (arguments.length) {
    case 1:
      return parseInt(Math.random() * minNum + 1, 10);
      break;
    case 2:
      return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);
      break;
    default:
      return 0;
      break;
  }
}
// 时间格式化输出，如03:25:19 86。每10ms都会调用一次
function date_format(micro_second, strFormat) {
  var resultData = "";
  // 秒数
  var second = Math.floor(micro_second / 1000);
  //天
  var day = Math.floor(second / (3600 * 24));
  // 小时位
  var hr = Math.floor((second - day * 3600 * 24) / 3600);
  // 分钟位
  var min = fill_zero_prefix(Math.floor((second - hr * 3600 - day * 3600 * 24) / 60));
  // 秒位
  var sec = fill_zero_prefix((second - hr * 3600 - min * 60 - day * 3600 * 24));// equal to => var sec = second % 60;
  switch (strFormat) {
    case 0:
      if (day > 0) {
        resultData = day + "天 " + hr + "小时" + min + "分" + sec + "秒"
      } else if (day <= 0 && hr > 0){
        resultData = hr + "小时" + min + "分" + sec + "秒"
      } else if (day <= 0 && hr <= 0) {
        resultData = min + "分" + sec + "秒"
      }
      break;
    case 1:
      resultData = hr + ":" + min + ":" + sec
      break;
    case 2:
      resultData = min + ":" + sec
      break;
    case 3:
      var sec = second - hr * 3600 - min * 60 == 0 ? 60 : fill_zero_prefix((second - hr * 3600 - min * 60));
      resultData = sec
      break;
    default:
      resultData = hr + ":" + min + ":" + sec
      break;
  }
  return resultData;
}
// 位数不足补零
function fill_zero_prefix(num) {
  return num < 10 ? "0" + num : num
}
module.exports = {
  addition    : addition,
  subtraction : subtraction,
  multiply    : multiply,
  division    : division,
  formatTime  : formatTime,
  in_array    : in_array,
  objCount    : objCount,
  randomNum   : randomNum,
  date_format : date_format,
  removeByValue: removeByValue
};